// functions/index.js
const { onCall, HttpsError } = require("firebase-functions/v2/https");
const admin = require("firebase-admin");

admin.initializeApp();

// üîπ Neuen Nutzer anlegen
exports.createUser = onCall(async (request) => {
  console.log("üì• createUser aufgerufen:", request.data);

  if (!request.auth?.token?.admin) {
    console.log("‚õî Zugriff verweigert (kein Admin) bei createUser");
    throw new HttpsError("permission-denied", "Nur Admins d√ºrfen neue Nutzer anlegen.");
  }

  const { email, password, displayName } = request.data;

  try {
    const userRecord = await admin.auth().createUser({
      email,
      password,
      displayName: displayName || ""
    });
    console.log("‚úÖ Nutzer angelegt:", userRecord.uid);
    return { uid: userRecord.uid };
  } catch (err) {
    console.error("‚ùå Fehler bei createUser:", err);
    throw new HttpsError("internal", err.message);
  }
});

// üîπ Nutzer l√∂schen
exports.deleteUser = onCall(async (request) => {
  console.log("üì• deleteUser aufgerufen:", request.data);

  if (!request.auth?.token?.admin) {
    console.log("‚õî Zugriff verweigert (kein Admin) bei deleteUser");
    throw new HttpsError("permission-denied", "Nur Admins d√ºrfen Nutzer l√∂schen.");
  }

  const { uid } = request.data;

  try {
    await admin.auth().deleteUser(uid);
    console.log("‚úÖ Nutzer gel√∂scht:", uid);
    return { success: true };
  } catch (err) {
    console.error("‚ùå Fehler bei deleteUser:", err);
    throw new HttpsError("internal", err.message);
  }
});

// üîπ Adminrechte setzen oder entfernen
exports.setUserAdmin = onCall(async (request) => {
  console.log("üì• setUserAdmin aufgerufen:", request.data);

  if (!request.auth?.token?.admin) {
    console.log("‚õî Zugriff verweigert (kein Admin) bei setUserAdmin");
    throw new HttpsError("permission-denied", "Nur Admins d√ºrfen Adminrechte vergeben.");
  }

  const { uid, makeAdmin } = request.data;

  try {
    await admin.auth().setCustomUserClaims(uid, { admin: makeAdmin });
    console.log(`‚úÖ Adminrechte ${makeAdmin ? "gesetzt" : "entfernt"} f√ºr`, uid);
    return { success: true };
  } catch (err) {
    console.error("‚ùå Fehler bei setUserAdmin:", err);
    throw new HttpsError("internal", err.message);
  }
});

// üîπ Nutzer aktualisieren (Name etc.)
exports.updateUser = onCall(async (request) => {
  console.log("üì• updateUser aufgerufen:", request.data);

  if (!request.auth?.token?.admin) {
    console.log("‚õî Zugriff verweigert (kein Admin) bei updateUser");
    throw new HttpsError("permission-denied", "Nur Admins d√ºrfen Nutzer √§ndern.");
  }

  const { uid, displayName } = request.data;

  try {
    await admin.auth().updateUser(uid, { displayName });
    console.log("‚úÖ Nutzer aktualisiert:", uid);
    return { success: true };
  } catch (err) {
    console.error("‚ùå Fehler bei updateUser:", err);
    throw new HttpsError("internal", err.message);
  }
});

// üîπ Alle Nutzer auflisten
exports.listUsers = onCall(async (request) => {
  console.log("üì• listUsers wurde aufgerufen");

  if (!request.auth?.token?.admin) {
    console.log("‚õî Zugriff verweigert ‚Äì kein Admin bei listUsers");
    throw new HttpsError("permission-denied", "Nur Admins d√ºrfen Benutzer auflisten.");
  }

  try {
    const listUsersResult = await admin.auth().listUsers(1000);
    console.log(`‚úÖ ${listUsersResult.users.length} Nutzer gefunden`);

    const users = listUsersResult.users.map((userRecord) => ({
      uid: userRecord.uid,
      email: userRecord.email,
      displayName: userRecord.displayName || "",
      admin: userRecord.customClaims?.admin === true
    }));

    return { users };
  } catch (err) {
    console.error("‚ùå Fehler in listUsers:", err);
    throw new HttpsError("internal", err.message);
  }
});
